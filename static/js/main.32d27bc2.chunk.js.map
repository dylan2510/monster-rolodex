{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","this","filteredMonster","filter","m","name","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,G,kBAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,aCAlBC,EAAW,SAACP,GAErB,OADAQ,QAAQC,IAAIT,GAER,qBAAKC,UAAU,YAAf,SAEID,EAAMU,SAASC,KAAI,SAAAP,GAAO,OAExB,aADA,CACC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCXpBO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwDPG,E,kDAxDb,aAAc,IAAD,8BAEX,gBAUFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SATrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IANJ,E,gEAiBO,IAAD,OAEjBZ,QAAQC,IAAR,8BAGAe,MAAM,8CACLC,MAAK,SAAAC,GAEJ,OADYA,EAASC,UAGtBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAACT,SAAUkB,OAE1BC,OAAM,SAAAC,OAEPtB,QAAQC,IAAR,+B,+BAGO,MAEyBsB,KAAKR,MAA9Bb,EAFA,EAEAA,SAAUU,EAFV,EAEUA,YAEXY,EAAkBtB,EAASuB,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,cACjDC,SAASjB,EAAYgB,kBAIxB,OAFA5B,QAAQC,IAAR,6BAAkCuB,IAGhC,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWY,YAAY,kBACbC,aAAciB,KAAKjB,eAE7B,cAAC,EAAD,CAAUJ,SAAUsB,W,GArDVM,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.32d27bc2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n            <h2>{props.monster.email}</h2>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\n// Component (functional) : CardList\r\n// Takes in a parameter props. Parameters are the params of the tags\r\n// Children are the inner ontent of the tag\r\nexport const CardList = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"card-list\">\r\n        {\r\n            props.monsters.map(monster => (\r\n              // unique key here helps react to know which element to update and re-render\r\n              <Card key={monster.id} monster={monster}></Card>\r\n            ))\r\n        }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport '../search-box/search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <input \r\n            className=\"search\" \r\n            type=\"search\" \r\n            placeholder={placeholder}\r\n            onChange={handleChange}>\r\n        </input>\r\n    );\r\n};","import React from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n//import logo from './logo.svg';\n\nclass App extends React.Component {\n\n  // Constructor\n  constructor(){\n    // call parent - Component\n    super(); \n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n\n  }\n\n  // when creating functions, use arrow/lambda so 'this' can be bidn to its current class\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  };\n\n  // React Life Cycle method - called when components are put on page\n  componentDidMount(){\n\n    console.log(`Before Component did mount`);\n\n    // promise instance of ajax, use .then for resolve and .catch for errors\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => {\n      let users = response.json();\n      return users;\n    })\n    .then(users => {\n      this.setState({monsters: users})\n    })\n    .catch(error => {});\n\n    console.log(`After Component did mount`);\n  }\n\n  render() {\n    // Deep clone the state object\n    const {monsters, searchField} = this.state;\n    // note that is searchFiled is empty, includes will return true\n    const filteredMonster = monsters.filter(m => m.name.toLowerCase()\n      .includes(searchField.toLowerCase()));\n\n    console.log(`Filtered monster = ${filteredMonster}`);\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder=\"search monsters\" \n                  handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}